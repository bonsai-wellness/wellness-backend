generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id_user         Int               @id @default(autoincrement())
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  email           String            @unique
  password        String
  first_name      String
  last_name       String
  is_admin        String            @db.VarChar(1)
  ReservationUser ReservationUser[]
}

model Torneo {
  torneo_id   Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  name        String
  evento      String
  description String
  url         String
  date_start  DateTime @db.Date
  date_end    DateTime @db.Date
  location    String
  imagen      String
  is_active   String   @db.VarChar(1)
  deporte     Deporte  @relation(fields: [deporte_id], references: [deporte_id])
  deporte_id  Int
}

model Aviso {
  aviso_id    Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  name        String
  description String
  imagen      String
  is_active   String   @db.VarChar(1)
}

model EspacioPadre {
  espacio_padre_id Int       @id @default(autoincrement())
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  name             String
  code             String
  map_url          String
  is_active        String    @db.VarChar(1)
  Espacio          Espacio[]
}

model Espacio {
  espacio_id             Int                      @id @default(autoincrement())
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  name                   String
  code                   String
  capacity               Int
  time_max               Int                      @db.SmallInt
  details                String
  open_at                DateTime                 @db.Time
  close_at               DateTime                 @db.Time
  imagen                 String
  is_active              String                   @db.VarChar(1)
  espacioPadre           EspacioPadre             @relation(fields: [espacio_padre_id], references: [espacio_padre_id])
  espacio_padre_id       Int
  Reservation            Reservation[]
  EspacioDeporte         EspacioDeporte[]
  EspacioPuntoImportante EspacioPuntoImportante[]
}

model Deporte {
  deporte_id     Int              @id @default(autoincrement())
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  name           String
  imagen         String
  Torneo         Torneo[]
  EspacioDeporte EspacioDeporte[]
}

model EspacioDeporte {
  deporte    Deporte  @relation(fields: [deporte_id], references: [deporte_id])
  espacio    Espacio  @relation(fields: [espacio_id], references: [espacio_id])
  deporte_id Int
  espacio_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([deporte_id, espacio_id])
}

model PuntoImportante {
  punto_importante_id    Int                      @id @default(autoincrement())
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  name                   Int
  EspacioPuntoImportante EspacioPuntoImportante[]
}

model EspacioPuntoImportante {
  espacio             Espacio         @relation(fields: [espacio_id], references: [espacio_id])
  puntoImportante     PuntoImportante @relation(fields: [punto_importante_id], references: [punto_importante_id])
  espacio_id          Int
  punto_importante_id Int
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt

  @@id([espacio_id, punto_importante_id])
}

model Reservation {
  reservation_id  Int               @id @default(autoincrement())
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  entry_time      DateTime          @db.Time
  exit_time       DateTime          @db.Time
  espacio         Espacio           @relation(fields: [espacio_id], references: [espacio_id])
  espacio_id      Int
  ReservationUser ReservationUser[]
}

model ReservationUser {
  reservation    Reservation @relation(fields: [reservation_id], references: [reservation_id])
  reservation_id Int
  user           User        @relation(fields: [user_id], references: [id_user])
  user_id        Int
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt

  @@id([reservation_id, user_id])
}

model WellnessGym {
  wellnsess_gym_id Int                @id @default(autoincrement())
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  aforo_actual     Int
  capacidad_max    Int
  WellnessLog      WellnessLog[]
  WellnessSchedule WellnessSchedule[]
}

model WellnessSchedule {
  day_of_week_id  String
  wellnessGym     WellnessGym @relation(fields: [wellness_gym_id], references: [wellnsess_gym_id])
  wellness_gym_id Int
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  open_time       DateTime    @db.Time
  close_time      DateTime    @db.Time

  @@id([day_of_week_id, wellness_gym_id])
}

model WellnessLog {
  wellness_log_id Int         @id @default(autoincrement())
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  type            String      @db.VarChar(1)
  time            DateTime
  wellness        WellnessGym @relation(fields: [wellness_id], references: [wellnsess_gym_id])
  wellness_id     Int
}
